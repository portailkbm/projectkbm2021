{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport { verify, sign } from \"jsonwebtoken\";\nimport axios from \"./axios\";\n\nvar isValidToken = function isValidToken(accessToken) {\n  if (!accessToken) {\n    return false;\n  }\n\n  var decoded = jwtDecode(accessToken);\n  var currentTime = Date.now() / 1000;\n  return decoded.exp > currentTime;\n}; //  const handleTokenExpired = (exp) => {\n//   let expiredTimer;\n//   window.clearTimeout(expiredTimer);\n//   const currentTime = Date.now();\n//   const timeLeft = exp * 1000 - currentTime;\n//   console.log(timeLeft);\n//   expiredTimer = window.setTimeout(() => {\n//     console.log('expired');\n//   }, timeLeft);\n// };\n\n\nvar setSession = function setSession(accessToken) {\n  if (accessToken) {\n    localStorage.setItem(\"accessToken\", accessToken);\n    axios.defaults.headers.common.Authorization = \"Bearer \".concat(accessToken); // This function below will handle when token is expired\n    // const { exp } = jwtDecode(accessToken);\n    // handleTokenExpired(exp);\n  } else {\n    localStorage.removeItem(\"accessToken\");\n    delete axios.defaults.headers.common.Authorization;\n  }\n};\n\nexport { verify, sign, isValidToken, setSession };","map":{"version":3,"sources":["C:/Users/enliv/Desktop/appstack-react-2-master/src/utils/jwt.ts"],"names":["jwtDecode","verify","sign","axios","isValidToken","accessToken","decoded","currentTime","Date","now","exp","setSession","localStorage","setItem","defaults","headers","common","Authorization","removeItem"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAAiB;AACrC,MAAI,CAACA,WAAL,EAAkB;AACjB,WAAO,KAAP;AACA;;AACD,MAAMC,OAAY,GAAGN,SAAS,CAACK,WAAD,CAA9B;AACA,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;AAEA,SAAOH,OAAO,CAACI,GAAR,GAAcH,WAArB;AACA,CARD,C,CAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACN,WAAD,EAAiB;AACnC,MAAIA,WAAJ,EAAiB;AAChBO,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCR,WAApC;AACCF,IAAAA,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuBC,MAAxB,CAAuCC,aAAvC,oBAAiEZ,WAAjE,EAFgB,CAGhB;AACA;AACA;AACA,GAND,MAMO;AACNO,IAAAA,YAAY,CAACM,UAAb,CAAwB,aAAxB;AACA,WAAQf,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuBC,MAAxB,CAAuCC,aAA9C;AACA;AACD,CAXD;;AAaA,SAAShB,MAAT,EAAiBC,IAAjB,EAAuBE,YAAvB,EAAqCO,UAArC","sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport { verify, sign } from \"jsonwebtoken\";\r\nimport axios from \"./axios\";\r\n\r\nconst isValidToken = (accessToken) => {\r\n\tif (!accessToken) {\r\n\t\treturn false;\r\n\t}\r\n\tconst decoded: any = jwtDecode(accessToken);\r\n\tconst currentTime = Date.now() / 1000;\r\n\r\n\treturn decoded.exp > currentTime;\r\n};\r\n\r\n//  const handleTokenExpired = (exp) => {\r\n//   let expiredTimer;\r\n\r\n//   window.clearTimeout(expiredTimer);\r\n//   const currentTime = Date.now();\r\n//   const timeLeft = exp * 1000 - currentTime;\r\n//   console.log(timeLeft);\r\n//   expiredTimer = window.setTimeout(() => {\r\n//     console.log('expired');\r\n//   }, timeLeft);\r\n// };\r\n\r\nconst setSession = (accessToken) => {\r\n\tif (accessToken) {\r\n\t\tlocalStorage.setItem(\"accessToken\", accessToken);\r\n\t\t(axios.defaults.headers.common as any).Authorization = `Bearer ${accessToken}`;\r\n\t\t// This function below will handle when token is expired\r\n\t\t// const { exp } = jwtDecode(accessToken);\r\n\t\t// handleTokenExpired(exp);\r\n\t} else {\r\n\t\tlocalStorage.removeItem(\"accessToken\");\r\n\t\tdelete (axios.defaults.headers.common as any).Authorization;\r\n\t}\r\n};\r\n\r\nexport { verify, sign, isValidToken, setSession };\r\n"]},"metadata":{},"sourceType":"module"}