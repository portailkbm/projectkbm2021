{"ast":null,"code":"import _slicedToArray from \"C:/Users/enliv/Desktop/appstack-react-2-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1]; // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"8hQM1Q2WSZTzroW0Nh1enivcYwg=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["C:/Users/enliv/Desktop/appstack-react-2-master/src/hooks/useLocalStorage.tsx"],"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAAA;;AAC3C;AACA;AACA,kBAAsCH,QAAQ,CAAC,YAAM;AACpD,QAAI;AACH;AACA,UAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFG,CAGH;;AAAA;AACA,aAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACA,KALD,CAKE,OAAOO,KAAP,EAAc;AACf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOP,YAAP;AACA;AACD,GAX6C,CAA9C;AAAA;AAAA,MAAOU,WAAP;AAAA,MAAoBC,cAApB,iBAH2C,CAgB3C;AACA;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC3B,QAAI;AACH;AACA,UAAMC,YAAY,GACjBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADlD,CAFG,CAIH;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CALG,CAMH;;AACAZ,MAAAA,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BjB,GAA5B,EAAiCM,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAjC;AACA,KARD,CAQE,OAAOP,KAAP,EAAc;AACf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD,GAbD;;AAeA,SAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACA;;GAlCQd,e;;AAoCT,eAAeA,eAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n\t// State to store our value\r\n\t// Pass initial state function to useState so logic is only executed once\r\n\tconst [storedValue, setStoredValue] = useState(() => {\r\n\t\ttry {\r\n\t\t\t// Get from local storage by key\r\n\t\t\tconst item = window.localStorage.getItem(key);\r\n\t\t\t// Parse stored json or if none return initialValue\r\n\t\t\treturn item ? JSON.parse(item) : initialValue;\r\n\t\t} catch (error) {\r\n\t\t\t// If error also return initialValue\r\n\t\t\tconsole.log(error);\r\n\t\t\treturn initialValue;\r\n\t\t}\r\n\t});\r\n\r\n\t// Return a wrapped version of useState's setter function that\r\n\t// persists the new value to localStorage.\r\n\tconst setValue = (value) => {\r\n\t\ttry {\r\n\t\t\t// Allow value to be a function so we have same API as useState\r\n\t\t\tconst valueToStore =\r\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\r\n\t\t\t// Save state\r\n\t\t\tsetStoredValue(valueToStore);\r\n\t\t\t// Save to local storage\r\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n\t\t} catch (error) {\r\n\t\t\t// A more advanced implementation would handle the error case\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n"]},"metadata":{},"sourceType":"module"}